module
    kind es6
    import passport from 'passport'
    $if data.Features.auth.strategies.useLocal
        const jwt = require('express-jwt')
    import { GetUserModel } from './mongo/user'
    $if data.Features.auth.strategies.useLocal
        import { createStrategy as createLocalStrategy } from './strategies/local'
    $if data.Features.auth.strategies.useGithub
        import { createStrategy as createGithubStrategy} from './strategies/github'
    
    let initialized = false

    function initPassport

        const userModel = GetUserModel()
        
        $if data.Features.auth.strategies.useLocal
            _ passport.use
                _ createLocalStrategy
        
        $if data.Features.auth.strategies.useGithub
            _ passport.use
                _ createGithubStrategy

        _ passport.serializeUser
            function 
                param user
                param done
                log 'features.auth.manager.serializeUser.user', user
                _ done(null, user.id)
        
        _ passport.deserializeUser
            function 
                param id
                param done
                log 'features.auth.manager.deserializeUser.id', id
                _ userModel.findById
                    @ id
                    function 
                        param err
                        param user
                        log 'features.auth.manager.deserializeUser.user', user
                        _ done(err, user)
        
        set initialized = true

    function getTokenFromHeaders
        param req
        const 
            { 
                { headers
                    @ authorization
            = req
        if authorization && authorization.split(' ')[0] === 'Token'
            return authorization.split(' ')[1]
        return null

    export 
        function getPassport
            if initialized == false
                _ initPassport
            return passport
            
    export
        function authenticate
            param strategyName
            param options
            param callback
            return
                _ passport.authenticate
                    @ strategyName
                    @ options
                    @ callback

    $if data.Features.auth.strategies.useLocal
        export
            const jwtAuth
                {
                    @ required
                        _ jwt
                            { 
                                @ secret 'secret'
                                @ userProperty 'payload'
                                @ getToken getTokenFromHeaders
                    @ optional
                        _ jwt
                            { 
                                @ secret 'secret'
                                @ userProperty 'payload'
                                @ getToken getTokenFromHeaders
                                @ credentialsRequired false